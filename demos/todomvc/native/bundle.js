const templateTodo=document.createElement("template");templateTodo.innerHTML=`\n    <style>\n        h1 {\n            font-size: 100px;\n            font-weight: 100;\n            text-align: center;\n            color: rgba(175, 47, 47, 0.15);\n        }\n\n        section {\n            background: #fff;\n            margin: 130px 0 40px 0;\n            position: relative;\n            box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 25px 50px 0 rgba(0, 0, 0, 0.1);\n        }\n\n        #list-container {\n            margin: 0;\n            padding: 0;\n            list-style: none;\n            border-top: 1px solid #e6e6e6;\n        }\n    </style>\n    <h1>Todos WC</h1>\n    <section>\n        <todo-input></todo-input>\n        <ul id="list-container"></ul>\n    </section>\n`;class MyTodo extends HTMLElement{constructor(){super();this._root=this.attachShadow({mode:"open"});this._list=[{text:"my initial todo",checked:false},{text:"Learn about Web Components",checked:true}]}connectedCallback(){this._root.appendChild(templateTodo.content.cloneNode(true));this.$input=this._root.querySelector("todo-input");this.$listContainer=this._root.querySelector("#list-container");this.$input.addEventListener("onSubmit",this.addItem.bind(this));this._render()}addItem(e){let newTodo={text:e.detail,checked:false};this._list.push(newTodo);this._render()}removeItem(e){this._list.splice(e.detail,1);this._render()}toggleItem(e){const item=this._list[e.detail];this._list[e.detail]={...item,checked:!item.checked};this._render()}disconnectedCallback(){}_render(){if(!this.$listContainer)return;this.$listContainer.innerHTML="";this._list.forEach((item,index)=>{let $item=document.createElement("todo-item");$item.setAttribute("text",item.text);$item.checked=item.checked;$item.index=index;$item.addEventListener("onRemove",this.removeItem.bind(this));$item.addEventListener("onToggle",this.toggleItem.bind(this));this.$listContainer.appendChild($item)})}}window.customElements.define("my-todo",MyTodo);const templateTodoInput=document.createElement("template");templateTodoInput.innerHTML=`\n    <style>\n        #new-todo-form {\n            position: relative;\n            font-size: 24px;\n            border-bottom: 1px solid #ededed;\n        }\n\n        #new-todo {\n            padding: 16px 16px 16px 60px;\n            border: none;\n            background: rgba(0, 0, 0, 0.003);\n            position: relative;\n            margin: 0;\n            width: 100%;\n            font-size: 24px;\n            font-family: inherit;\n            font-weight: inherit;\n            line-height: 1.4em;\n            border: 0;\n            outline: none;\n            color: inherit;\n            padding: 6px;\n            border: 1px solid #CCC;\n            box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);\n            box-sizing: border-box;\n        }\n    </style>\n    <form id="new-todo-form">\n        <input id="new-todo" type="text" placeholder="What needs to be done?" />\n    </form>\n`;class TodoInput extends HTMLElement{constructor(){super();this._root=this.attachShadow({mode:"open"})}connectedCallback(){this._root.appendChild(templateTodoInput.content.cloneNode(true));this.$form=this._root.querySelector("form");this.$input=this._root.querySelector("input");this.$form.addEventListener("submit",e=>{e.preventDefault();if(!this.$input.value)return;this.dispatchEvent(new CustomEvent("onSubmit",{detail:this.$input.value}));this.$input.value=""})}disconnectedCallback(){}}window.customElements.define("todo-input",TodoInput);const templateTodoItem=document.createElement("template");templateTodoItem.innerHTML=`\n    <style>\n      :host {\n        display: block;\n      }\n\n      li.item {\n        font-size: 24px;\n        display: block;\n        position: relative;\n        border-bottom: 1px solid #ededed;\n      }\n\n      li.item input {\n        text-align: center;\n        width: 40px;\n        /* auto, since non-WebKit browsers doesn't support input styling */\n        height: auto;\n        position: absolute;\n        top: 9px;\n        bottom: 0;\n        margin: auto 0;\n        border: none;\n        /* Mobile Safari */\n        -webkit-appearance: none;\n        appearance: none;\n      }\n\n      li.item input:after {\n        content: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="-10 -18 100 135"><circle cx="50" cy="50" r="50" fill="none" stroke="#ededed" stroke-width="3"/></svg>');\n      }\n\n      li.item input:checked:after {\n        content: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="-10 -18 100 135"><circle cx="50" cy="50" r="50" fill="none" stroke="#bddad5" stroke-width="3"/><path fill="#5dc2af" d="M72 25L42 71 27 56l-4 4 20 20 34-52z"/></svg>');\n      }\n\n      li.item label {\n        white-space: pre;\n        word-break: break-word;\n        padding: 15px 60px 15px 15px;\n        margin-left: 45px;\n        display: block;\n        line-height: 1.2;\n        transition: color 0.4s;\n      }\n\n      li.item.completed label {\n        color: #d9d9d9;\n        text-decoration: line-through;\n      }\n\n      li.item button,\n      li.item input[type="checkbox"] {\n        outline: none;\n      }\n\n      li.item button {\n        margin: 0;\n        padding: 0;\n        border: 0;\n        background: none;\n        font-size: 100%;\n        vertical-align: baseline;\n        font-family: inherit;\n        font-weight: inherit;\n        color: inherit;\n        -webkit-appearance: none;\n        appearance: none;\n        -webkit-font-smoothing: antialiased;\n        -moz-font-smoothing: antialiased;\n        font-smoothing: antialiased;\n      }\n\n      li.item .destroy {\n        position: absolute;\n        top: 0;\n        right: 10px;\n        bottom: 0;\n        width: 40px;\n        height: 40px;\n        margin: auto 0;\n        font-size: 30px;\n        color: #cc9a9a;\n        margin-bottom: 11px;\n        transition: color 0.2s ease-out;\n      }\n\n      li.item .destroy:hover {\n        color: #af5b5e;\n      }\n    </style>\n    <li class="item">\n        <input type="checkbox">\n        <label></label>\n        <button class="destroy">x</button>\n    </li>\n`;class TodoItem extends HTMLElement{constructor(){super();this._root=this.attachShadow({mode:"open"});this._checked=false;this._text=""}connectedCallback(){this._root.appendChild(templateTodoItem.content.cloneNode(true));this.$item=this._root.querySelector(".item");this.$removeButton=this._root.querySelector(".destroy");this.$text=this._root.querySelector("label");this.$checkbox=this._root.querySelector("input");this.$removeButton.addEventListener("click",e=>{e.preventDefault();this.dispatchEvent(new CustomEvent("onRemove",{detail:this.index,item:this.$item}))});this.$checkbox.addEventListener("click",e=>{e.preventDefault();this.dispatchEvent(new CustomEvent("onToggle",{detail:this.index}))});this._render()}disconnectedCallback(){}static get observedAttributes(){return["text"]}attributeChangedCallback(name,oldValue,newValue){this._text=newValue}set index(value){this._index=value}get index(){return this._index}set checked(value){this._checked=Boolean(value)}get checked(){return this.hasAttribute("checked")}_render(){if(!this.$item)return;this.$text.textContent=this._text;if(this._checked){this.$item.classList.add("completed");this.$checkbox.setAttribute("checked","")}else{this.$item.classList.remove("completed");this.$checkbox.removeAttribute("checked")}}}window.customElements.define("todo-item",TodoItem);